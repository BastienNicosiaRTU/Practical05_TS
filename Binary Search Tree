import matplotlib.pyplot as plt
import networkx as nx

class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.value = key

class BinarySearchTree:
    def __init__(self):
        self.root = None

    def insert(self, key):
        if self.root is None:
            self.root = Node(key)
        else:
            self._insert_recursive(self.root, key)

    def _insert_recursive(self, node, key):
        if key < node.value:
            if node.left is None:
                node.left = Node(key)
            else:
                self._insert_recursive(node.left, key)
        else:
            if node.right is None:
                node.right = Node(key)
            else:
                self._insert_recursive(node.right, key)

    def search(self, key):
        return self._search_recursive(self.root, key)

    def _search_recursive(self, node, key):
        if node is None or node.value == key:
            return node
        if key < node.value:
            return self._search_recursive(node.left, key)
        return self._search_recursive(node.right, key)
    
    def delete(self, key):
        self.root = self._delete_recursive(self.root, key)

    def _delete_recursive(self, node, key):
        if node is None:
            return node
        if key < node.value:
            node.left = self._delete_recursive(node.left, key)
        elif key > node.value:
            node.right = self._delete_recursive(node.right, key)
        else:
            if node.left is None:
                return node.right
            elif node.right is None:
                return node.left
            else:
                temp = self._find_min(node.right)
                node.value = temp.value
                node.right = self._delete_recursive(node.right, temp.value)
        return node

    def _find_min(self, node):
        while node.left is not None:
            node = node.left
        return node
    
    def inorder_traverse(self):
        self._inorder_traverse_recursive(self.root)
        print()  # New line after traversal

    def _inorder_traverse_recursive(self, node):
        if node is not None:
            self._inorder_traverse_recursive(node.left)
            print(node.value, end=' ')
            self._inorder_traverse_recursive(node.right)

    def postorder_traverse(self):
        self._postorder_traverse_recursive(self.root)
        print()  # New line after traversal

    def _postorder_traverse_recursive(self, node):
        if node is not None:
            self._postorder_traverse_recursive(node.left)
            self._postorder_traverse_recursive(node.right)
            print(node.value, end=' ')

    def plot_tree(self, node=None, pos=None, x=0, y=0, layer=1):
        if pos is None:
            pos = {}
        if node is not None:
            pos[node.value] = (x, y)
            if node.left:
                self.plot_tree(node.left, pos, x - 1 / layer, y - 1, layer + 1)
            if node.right:
                self.plot_tree(node.right, pos, x + 1 / layer, y - 1, layer + 1)
        return pos
    
def draw_bst(tree):
    pos = tree.plot_tree(tree.root)
    G = nx.DiGraph()
    nodes = pos.keys()
    for node in nodes:
        G.add_node(node)
        if tree.search(node).left:
            G.add_edge(node, tree.search(node).left.value)
        if tree.search(node).right:
            G.add_edge(node, tree.search(node).right.value)

    fig, ax = plt.subplots(figsize=(8, 5))  # Adjust figure size as needed
    nx.draw(G, pos, with_labels=True, arrows=False, node_size=2000, node_color="skyblue", ax=ax)
    plt.show()

a = [49, 38, 65, 97, 60, 76, 13, 27, 5, 1]
b = [149, 38, 65, 197, 60, 176, 13, 217, 5, 11]
c = [49, 38, 65, 97, 64, 76, 13, 77, 5, 1, 55, 50, 24]

tree_a = BinarySearchTree()
for key in a :
    tree_a.insert(key)

tree_b = BinarySearchTree()
for key in b :
    tree_b.insert(key)

tree_c = BinarySearchTree()
for key in c :
    tree_c.insert(key)

#draw_bst(tree_a)
#draw_bst(tree_b)
#draw_bst(tree_c)
    
found = tree_a.search(27)
#print("Search for 27 in tree A ", "Found" if found else "Not Found")
foundB = tree_b.search(27)
#print("Search for 27 in tree B ", "Found" if foundB else "Not Found")
foundC = tree_c.search(50)
#print("Search for 50 in tree C ", "Found" if foundC else "Not Found")

#tree_a.delete(38)
#draw_bst(tree_a)
#tree_b.delete(38)
#draw_bst(tree_b)
#tree_c.delete(38)
#draw_bst(tree_c)

#print("Inorder Traversal of Tree a: ")
#tree_a.inorder_traverse()

#print("Inorder Traversal of Tree b: ")
#tree_b.inorder_traverse()

#print("Inorder Traversal of Tree c: ")
#tree_c.inorder_traverse()

print("Post order Traversal of Tree a: ")
tree_a.postorder_traverse()
print("Post order Traversal of Tree b: ")
tree_b.postorder_traverse()
print("Post order Traversal of Tree c: ")
tree_c.postorder_traverse()

